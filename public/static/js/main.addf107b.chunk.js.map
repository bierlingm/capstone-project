{"version":3,"sources":["img/electric_light_bulb.png","img/game_die.png","img/lotus_woman.png","components/Backdrop.js","utils/utils.js","utils/colors.js","components/ItemList.js","components/NoteField.js","components/Prompt.js","App.js","GlobalStyles.js","serviceWorker.js","index.js"],"names":["module","exports","Backdrop","children","BackdropWrapper","Container","className","BackdropTimed","BackdropNotes","styled","div","ItemList","gridClass","listItems","items","map","item","ListItemStyled","key","id","text","ListStyled","ul","li","NoteField","localNotes","JSON","parse","localStorage","getItem","console","error","useState","notesWasAdded","setNotesWasAdded","initialNotes","notes","setNotes","useEffect","setItem","stringify","TextAreaStyled","onChange","event","newNote","noteId","nanoid","noteCreationDate","Date","noteSet","noteText","target","value","note","index","length","placeholder","data-testid","textarea","Prompt","max","randomPrompt","prompts","Math","floor","random","PromptStyled","slice","p","promptWritingMachine","Machine","initial","states","home","on","NOTES","START","noteLog","HOME","prompt","WRITE","SHUFFLE","shuffle","after","0","writing","STOP","1000","RETRY","SAVE","App","useMachine","current","send","matches","InputStyled","autoFocus","type","alt","ButtonStyled","onClick","Icon","src","electricLightBulb","DivStyled","gameDie","lotusWoman","img","button","input","createGlobalStyle","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","GlobalStyles","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.addf107b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/electric_light_bulb.bf314afb.png\";","module.exports = __webpack_public_path__ + \"static/media/game_die.007325ca.png\";","module.exports = __webpack_public_path__ + \"static/media/lotus_woman.15e6f330.png\";","import React from 'react'\nimport styled from 'styled-components/macro'\nimport { defaultFade, fullHeight } from '../utils/utils'\nimport { backdropColor } from '../utils/colors'\n\nexport function Backdrop({ children }) {\n  return (\n    <BackdropWrapper>\n      <Container className=\"default\">{children}</Container>\n    </BackdropWrapper>\n  )\n}\n\nexport function BackdropTimed({ children }) {\n  return (\n    <BackdropWrapper>\n      <Container className=\"timed\">{children}</Container>\n    </BackdropWrapper>\n  )\n}\n\nexport function BackdropNotes({ children }) {\n  return (\n    <BackdropWrapper>\n      <Container className=\"notes\">{children}</Container>\n    </BackdropWrapper>\n  )\n}\n\nconst Container = styled.div`\n  height: ${fullHeight};\n  text-align: center;\n  background: ${backdropColor};\n`\n\nconst BackdropWrapper = styled.div`\n  .default {\n    display: grid;\n    grid-template-columns:\n      [left-space-start] 10vw\n      [left-space-end main-start] 40vw\n      [left-half right-half] 40vw\n      [main-end right-space-start] 10vw\n      [right-space-end];\n    grid-template-rows:\n      [top-space-start] 10vh\n      [top-space-end icon-start] 25vh\n      [icon-end prompt-start] 30vh\n      [prompt-end button-start] 25vh\n      [button-end bottom-space-start] 10vh\n      [bottom-end];\n\n    .icon {\n      grid-column: main-start / main-end;\n      grid-row: icon-start / icon-end;\n    }\n\n    .main {\n      grid-column: main-start / main-end;\n      grid-row: icon-start / prompt-end;\n    }\n\n    .prompt {\n      grid-column: main-start / main-end;\n      grid-row: prompt-start / prompt-end;\n    }\n\n    .buttonLeft {\n      grid-column: main-start / left-half;\n      grid-row: button-start / button-end;\n    }\n\n    .buttonRight {\n      grid-column: right-half / main-end;\n      grid-row: button-start / button-end;\n    }\n  }\n\n  .timed {\n    display: grid;\n    grid-template-columns: 50% 50%;\n    animation: timer ${defaultFade};\n  }\n\n  .notes {\n    display: grid;\n    grid-template-columns:\n      [left-space-start] 10vw\n      [left-space-end main-start] 40vw\n      [left-half right-half] 40vw\n      [main-end right-space-start] 10vw\n      [right-space-end];\n    grid-template-rows:\n      [top-space-start] 10vh\n      [top-space-end notes-start] 55vh\n      [notes-end button-start] 25vh\n      [button-end bottom-space-start] 10vh\n      [bottom-end];\n\n    .notefield {\n      grid-column: main-start / main-end;\n      grid-row: notes-start / notes-end;\n    }\n\n    .buttonLeft {\n      grid-column: main-start / left-half;\n      grid-row: button-start / button-end;\n    }\n\n    .buttonRight {\n      grid-column: right-half / main-end;\n      grid-row: button-start / button-end;\n    }\n  }\n`\n","export const defaultFade = '90s' // Color fade time\nexport const testFade = '5s' // Color fade time for testing\nexport const defaultFont = 'Zilla Slab'\nexport const defaultFontSize = '36px'\nexport const defaultMargin = '0'\nexport const fullHeight = '100vh'\n\nexport function getRandomInt(max) {\n  return Math.floor(Math.random() * max)\n}\n","export const backgroundColor = '#55b9f3'\nexport const textColor = 'yellow'\nexport const backdropColor = '#55b9f3'\nexport const fadeColor = 'black'\n","import React from 'react'\nimport styled from 'styled-components/macro'\n\nexport default function ItemList({ gridClass, items }) {\n  const listItems = items.map((item) => (\n    <ListItemStyled key={item.id}>{item.text}</ListItemStyled>\n  ))\n\n  return <ListStyled className={gridClass}>{listItems}</ListStyled>\n}\n\nconst ListStyled = styled.ul`\n  overflow: scroll;\n  list-style: none;\n  padding: 0;\n`\n\nconst ListItemStyled = styled.li`\n  color: yellow;\n  font-size: 20px;\n`\n","import React, { useState, useEffect } from 'react'\nimport styled from 'styled-components/macro'\nimport initialNotes from '../notes.json'\nimport { nanoid } from 'nanoid'\n\nexport default function NoteField() {\n  let localNotes\n  try {\n    localNotes = JSON.parse(localStorage.getItem('notes'))\n  } catch {\n    console.error('Something bad happened...')\n  }\n\n  const [notesWasAdded, setNotesWasAdded] = useState(false)\n  const [notes, setNotes] = useState(\n    localNotes !== null ? localNotes : initialNotes\n  )\n\n  useEffect(() => {\n    localStorage.setItem('notes', JSON.stringify(notes))\n  }, [notes])\n\n  function handleSave(event) {\n    const newNote = {\n      noteId: nanoid(),\n      noteCreationDate: Date(),\n      noteSet: 'user',\n      noteText: event.target.value,\n    }\n\n    if (notesWasAdded) {\n      setNotes(\n        notes.map((note, index) =>\n          index === notes.length - 1 ? newNote : note\n        )\n      )\n    } else {\n      setNotes([...notes, newNote])\n      setNotesWasAdded(true)\n    }\n  }\n\n  return (\n    <TextAreaStyled\n      onChange={handleSave}\n      placeholder=\"Write your session notes in here...\"\n      className=\"notefield\"\n      data-testid=\"noteField\"\n    />\n  )\n}\n\nconst TextAreaStyled = styled.textarea`\n  type: text;\n  margin: 12px;\n  padding: 28px;\n  overflow: scroll;\n  resize: none;\n  background: transparent;\n  color: yellow;\n  font-size: 20px;\n  border: transparent;\n  border-radius: 10px;\n  background: #55b9f3;\n  box-shadow: inset 20px 20px 60px #489dcf, inset -20px -20px 60px #62d5ff;\n`\n","import React from 'react'\nimport styled from 'styled-components'\nimport prompts from '../prompts.json'\nimport { getRandomInt } from '../utils/utils'\n\nexport default function Prompt() {\n  const randomPrompt = JSON.stringify(\n    prompts[getRandomInt(prompts.length - 1)]['text']\n  )\n\n  return (\n    <PromptStyled>\n      {randomPrompt.slice(1, randomPrompt.length - 1)}\n    </PromptStyled>\n  )\n}\n\nconst PromptStyled = styled.p`\n  margin: 20px 0 20px 0;\n  justify-self: center;\n  align-self: center;\n`\n","import { useMachine } from '@xstate/react'\nimport React from 'react'\nimport styled from 'styled-components/macro'\nimport { Machine } from 'xstate'\nimport { Backdrop, BackdropNotes, BackdropTimed } from './components/Backdrop'\nimport ItemList from './components/ItemList'\nimport NoteField from './components/NoteField'\nimport Prompt from './components/Prompt'\nimport electricLightBulb from './img/electric_light_bulb.png'\nimport gameDie from './img/game_die.png'\nimport lotusWoman from './img/lotus_woman.png'\nimport notes from './notes.json'\n\nconst promptWritingMachine = Machine({\n  id: 'promptWriting',\n  initial: 'home',\n  states: {\n    home: {\n      on: {\n        NOTES: 'noteLog',\n        START: 'prompt',\n      },\n    },\n    noteLog: {\n      on: {\n        HOME: 'home',\n      },\n    },\n    prompt: {\n      on: {\n        WRITE: 'writing',\n        SHUFFLE: 'shuffle',\n      },\n    },\n    shuffle: {\n      after: {\n        0: 'prompt',\n      },\n    },\n    writing: {\n      on: {\n        STOP: 'prompt',\n      },\n      after: {\n        1000: 'notes',\n      },\n    },\n    notes: {\n      on: {\n        RETRY: 'writing',\n        SAVE: 'home',\n      },\n    },\n  },\n})\n\nexport default function App() {\n  const [current, send] = useMachine(promptWritingMachine)\n\n  return current.matches('writing') ? (\n    <BackdropTimed data-testid=\"writingBackdropTimed\">\n      <InputStyled autoFocus type=\"text\" alt=\"input\" data-testid=\"input\" />\n    </BackdropTimed>\n  ) : current.matches('notes') ? (\n    <BackdropNotes data-testid=\"notesBackdropNotes\">\n      <NoteField data-testid=\"notesNoteField\" />\n      <ButtonStyled\n        className=\"buttonLeft\"\n        onClick={() => send('RETRY')}\n        data-testid=\"notesRetryButton\"\n      >\n        retry\n      </ButtonStyled>\n      <ButtonStyled\n        className=\"buttonRight\"\n        onClick={() => send('SAVE')}\n        data-testid=\"notesSaveButton\"\n      >\n        save\n      </ButtonStyled>\n    </BackdropNotes>\n  ) : current.matches('prompt') ? (\n    <Backdrop data-testid=\"promptBackdrop\">\n      <Icon className=\"icon\" src={electricLightBulb} alt=\"Writing prompt\" />\n      <DivStyled className=\"prompt\" data-testid=\"promptPrompt\">\n        <Prompt />\n      </DivStyled>\n      <ButtonStyled\n        className=\"buttonLeft\"\n        onClick={() => send('SHUFFLE')}\n        data-testid=\"promptShuffleButton\"\n      >\n        shuffle\n      </ButtonStyled>\n      <ButtonStyled\n        className=\"buttonRight\"\n        onClick={() => send('WRITE')}\n        data-testid=\"promptStartButton\"\n      >\n        start\n      </ButtonStyled>\n    </Backdrop>\n  ) : current.matches('shuffle') ? (\n    <Backdrop>\n      <Icon\n        className=\"main\"\n        src={gameDie}\n        alt=\"Die throw\"\n        data-testid=\"shuffleGameDie\"\n      />\n    </Backdrop>\n  ) : current.matches('noteLog') ? (\n    <BackdropNotes data-testid=\"noteLogBackdropNotes\">\n      <ItemList\n        gridClass=\"notefield\"\n        items={notes}\n        data-testid=\"noteLogItemList\"\n      />\n      <ButtonStyled\n        className=\"buttonLeft\"\n        onClick={() => send('HOME')}\n        data-testid=\"noteLogHomeButton\"\n      >\n        home\n      </ButtonStyled>\n    </BackdropNotes>\n  ) : (\n    <Backdrop data-testid=\"homeBackdrop\">\n      <Icon\n        className=\"icon\"\n        src={lotusWoman}\n        alt=\"Woman in lotus position\"\n        data-testid=\"homeIcon\"\n      />\n      <ButtonStyled\n        className=\"buttonLeft\"\n        onClick={() => send('NOTES')}\n        data-testid=\"homeNotesButton\"\n      >\n        notes\n      </ButtonStyled>\n      <ButtonStyled\n        className=\"buttonRight\"\n        onClick={() => send('START')}\n        data-testid=\"homeWriteButton\"\n      >\n        write\n      </ButtonStyled>\n    </Backdrop>\n  )\n}\n\nconst Icon = styled.img`\n  justify-self: center;\n  align-self: center;\n`\n\nconst ButtonStyled = styled.button`\n  width: 80%;\n  padding: 20px;\n  color: yellow;\n  justify-self: center;\n  align-self: center;\n  font-size: 28px;\n  border: transparent;\n  border-radius: 20px;\n  background: linear-gradient(145deg, #4da7db, #5bc6ff);\n  box-shadow: 20px 20px 60px #489dcf, -20px -20px 60px #62d5ff;\n`\n\nconst InputStyled = styled.input`\n  height: 10%;\n  margin: 0;\n  background: transparent;\n  color: yellow;\n  align-self: center;\n  border: none;\n  padding-left: 24px;\n  font-size: 40px;\n`\n\nconst DivStyled = styled.div`\n  display: flex;\n`\n","import { createGlobalStyle } from 'styled-components'\nimport {\n  backdropColor,\n  backgroundColor,\n  fadeColor,\n  textColor,\n} from './utils/colors'\nimport { defaultFont, defaultFontSize, defaultMargin } from './utils/utils'\n\nexport default createGlobalStyle`\n\n* {\n  margin: ${defaultMargin};\n  font-family: ${defaultFont};\n  font-size: ${defaultFontSize};\n  background: ${backgroundColor};\n  color: ${textColor};\n  overflow: hidden;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n@keyframes timer {\n  0% {\n    background-color: ${backdropColor};\n  }\n  100% {\n    background-color: ${fadeColor};\n  }\n}\n`\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport GlobalStyles from './GlobalStyles';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <GlobalStyles />\n      <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}